package edu.gatech.seclass.sdpsalarycomp;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.view.*;import android.widget.*;import java.util.*;import java.lang.Math.*;public class SDPSalaryCompActivity extends AppCompatActivity {    Map<String, Integer> cities = new TreeMap<String, Integer>();    private Spinner currentCitySpinner, newCitySpinner;    private String currentCity;    private String newCity;    private Double getCurrentCityValue;    private Double getNewCityValue;    private Double baseSalaryValue;    private Double currentCityValue, newCityValue;    private Double finalTargetSalary;    private String baseSalaryTempText;    private Long finalResult;    EditText baseSalary;    TextView targetSalary;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_sdpsalary_comp);        baseSalary = (EditText)findViewById(R.id.baseSalary);        baseSalary.setText("0");        baseSalary.setSelection(baseSalary.getText().length());        this.onReadyCityList();        this.updateBaseSalary();    }    private void onReadyCityList() {        cities.put(getString(R.string.city1), 160);        cities.put(getString(R.string.city2), 152);        cities.put(getString(R.string.city3), 197);        cities.put(getString(R.string.city4), 201);        cities.put(getString(R.string.city5), 153);        cities.put(getString(R.string.city6), 244);        cities.put(getString(R.string.city7), 232);        cities.put(getString(R.string.city8), 241);        cities.put(getString(R.string.city9), 198);        cities.put(getString(R.string.city10), 114);        cities.put(getString(R.string.city11), 139);        cities.put(getString(R.string.city12), 217);        ArrayAdapter<String> data = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, cities.keySet().toArray(new String[0]));        data.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        //set currentCity        currentCitySpinner = (Spinner) findViewById(R.id.currentCity);        currentCitySpinner.setAdapter(data);        //set newCity        newCitySpinner = (Spinner) findViewById(R.id.newCity);        newCitySpinner.setAdapter(data);        //currentCity        currentCitySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                newCitySpinner = (Spinner) findViewById(R.id.newCity);                targetSalary = (TextView)findViewById(R.id.targetSalary);                baseSalary = (EditText)findViewById(R.id.baseSalary);                currentCity = parent.getItemAtPosition(position).toString();                newCity = getNewCityItem();                baseSalaryTempText = baseSalary.getText().toString();                getCurrentCityValue = new Double(cities.get(currentCity));                getNewCityValue = new Double(cities.get(newCity));                Double finalCurrentCity = computeBaseSalary(baseSalaryTempText, getCurrentCityValue, getNewCityValue);                finalResult = Math.round(finalCurrentCity);                finalResult = Math.abs(finalResult);                if (baseSalaryTempText.contains("-0") || baseSalaryTempText.contains("0-0")){                    baseSalary.setText("0");                }                //show error if no base salary provide or a negative integer                if((baseSalaryTempText.equals(null) || baseSalaryTempText.isEmpty())) {                    targetSalary.setText("");                    baseSalary.setError(getString(R.string.error_salary));                } else if(baseSalaryTempText.contains("-")) {                    targetSalary.setText("");                    baseSalary.setError(getString(R.string.error_salary));                } else {                    targetSalary.setText(Long.toString(finalResult));                    baseSalary.setError(null);                }            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        //newCity        newCitySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                currentCitySpinner = (Spinner) findViewById(R.id.currentCity);                targetSalary = (TextView)findViewById(R.id.targetSalary);                baseSalary = (EditText)findViewById(R.id.baseSalary);                newCity = parent.getItemAtPosition(position).toString();                currentCity = getCurrentCityItem();                baseSalaryTempText = baseSalary.getText().toString();                getNewCityValue = new Double(cities.get(newCity));                getCurrentCityValue = new Double(cities.get(currentCity));                Double finalNewCity = computeBaseSalary(baseSalaryTempText, getCurrentCityValue, getNewCityValue);                finalResult = Math.round(finalNewCity);                finalResult = Math.abs(finalResult);                if (baseSalaryTempText.contains("-0") || baseSalaryTempText.contains("0-0")){                    baseSalary.setText("0");                }                //show error if no base salary provide or a negative integer                if((baseSalaryTempText.equals(null) || baseSalaryTempText.isEmpty())) {                    targetSalary.setText("");                    baseSalary.setError(getString(R.string.error_salary));                } else if(baseSalaryTempText.contains("-")) {                    targetSalary.setText("");                    baseSalary.setError(getString(R.string.error_salary));                } else {                    targetSalary.setText(Long.toString(finalResult));                    baseSalary.setError(null);                }            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });    }    private void updateBaseSalary(){        baseSalary = (EditText)findViewById(R.id.baseSalary);        baseSalary.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                baseSalary.getText().clear();            }        });        baseSalary.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                targetSalary = (TextView)findViewById(R.id.targetSalary);                baseSalary = (EditText)findViewById(R.id.baseSalary);                baseSalary.setSelection(baseSalary.getText().length());                baseSalaryTempText = baseSalary.getText().toString();                getNewCityValue = new Double(cities.get(newCity));                getCurrentCityValue = new Double(cities.get(currentCity));                //compute value and update target salary                Double finalBaseSalary = computeBaseSalary(baseSalaryTempText, getCurrentCityValue, getNewCityValue);                finalResult = Math.round(finalBaseSalary);                finalResult = Math.abs(finalResult);                if (baseSalaryTempText.contains("-0") || baseSalaryTempText.contains("0-0")){                    baseSalary.setText("0");                }                //show error if no base salary provide or a negative integer                if((baseSalaryTempText.equals(null) || baseSalaryTempText.isEmpty())) {                    targetSalary.setText("");                    baseSalary.setError(getString(R.string.error_salary));                } else if(baseSalaryTempText.contains("-")) {                    targetSalary.setText("");                    baseSalary.setError(getString(R.string.error_salary));                } else {                    targetSalary.setText(Long.toString(finalResult));                    baseSalary.setError(null);                }            }        });    }    public Double computeBaseSalary(String baseSalaryTempText, Double getCurrentCityValue, Double getNewCityValue) {        currentCityValue = (getCurrentCityValue != 0) ? getCurrentCityValue : cities.get(getCurrentCityItem());        newCityValue = (getNewCityValue != 0) ? getNewCityValue : cities.get(getNewCityItem());        try {            baseSalaryValue = (baseSalaryTempText == null || baseSalaryTempText.trim().equals("")) ? 0 : Double.parseDouble(baseSalaryTempText);        } catch (NumberFormatException err) {            err.printStackTrace();        }        finalTargetSalary = (baseSalaryValue * newCityValue) / currentCityValue;        return finalTargetSalary;    }    public String getNewCityItem() {        if(newCity != null) {            return newCity;        } else {            return newCitySpinner.getSelectedItem().toString();        }    }    public String getCurrentCityItem() {        if(currentCity != null) {            return currentCity;        } else {            return currentCitySpinner.getSelectedItem().toString();        }    }}